#include <fstream>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <climits>
#include <bits/stdc++.h>
#include <string>
#include <string.h>
#include <math.h>
#include <stdio.h>

#define int long long int


//https://www.spoj.com/problems/BUGLIFE/en/


using namespace std;
int add(int a,int b,int mod){
    return ((a % mod) + (b % mod) ) % mod;
}
int sub(int a,int b,int mod){
    return ((a % mod) - (b % mod) + mod) % mod;
}
int multiply(int a,int b,int mod){
    return ((a % mod) * (b % mod)) % mod;
}

void fileIO(void) {

#ifndef ONLINE_JUDGE

    freopen("Input.txt", "r", stdin);
    freopen("Output.txt", "w", stdout);

#endif

}
void fastIO(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

int n,m;
vector<vector<int>>adj;
vector<int>color(2009);
vector<bool>vis(2009);

/*
 * bfs search with levels
 * bfs can have vis and color or distance which we can
 * determine */
bool bfs(int start){

    queue<int>q;
    vis[start] = true;
    q.push(start);
    color[start] = 1;
    while (!q.empty()){
        int u = q.front();
//        cout << u << " ";
        q.pop();
        for(auto e : adj[u]){
            if(!vis[e]) {
                q.push(e);
                vis[e] = 1;
                color[e] = 3 - color[u];
            }
            else{
                if(color[e] == color[u])
                    return 0;
            }

        }
    }
    return 1;
}
void solve(int t) {

    cin >> n >> m;
    adj.assign(n+1,vector<int>());
    vis.assign(n+1,0);
    color.assign(n+1,0);
    for(int i =0;i<m;i++){
        int u,v;cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    bool can = true;
    for(int i =1;i<=n;i++){
        if(!vis[i]){
            can &= bfs(i);
        }
    }
    cout << "Scenario #" << t << ":\n";
    if(can){
        cout << "No suspicious bugs found!\n";

    }
    else{
        cout << "Suspicious bugs found!\n";
    }




}

signed main() {
    fastIO();
    fileIO();
    int t;cin>>t;
    for(int i = 1;i<=t;i++)
    solve(i);
    return 0;
}