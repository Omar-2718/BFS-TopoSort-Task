#include <fstream>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <climits>
#include <bits/stdc++.h>
#include <string>
#include <string.h>
#include <math.h>
#include <stdio.h>

#define int long long int

// https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=2733

using namespace std;
int add(int a,int b,int mod){
    return ((a % mod) + (b % mod) ) % mod;
}
int sub(int a,int b,int mod){
    return ((a % mod) - (b % mod) + mod) % mod;
}
int multiply(int a,int b,int mod){
    return ((a % mod) * (b % mod)) % mod;
}

void fileIO(void) {

#ifndef ONLINE_JUDGE

    freopen("Input.txt", "r", stdin);
    freopen("Output.txt", "w", stdout);

#endif

}
void fastIO(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
int n,m;
vector<int>adj[1000009];
int in_degree[1000009];
bool vis[1000009];
vector<int>ans;
void bfs(){
    queue<int>q;
    for(int i =1;i<=n;i++){
        if(in_degree[i] == 0)
            q.push(i);
    }
    while (!q.empty()){
        int u = q.front();
        ans.push_back(u);
        q.pop();
        for(auto e : adj[u]){
            in_degree[e]--;
            if(!vis[e]) {
                if (in_degree[e] == 0) {
                    q.push(e);
                    vis[e] = 1;
                }
            }
        }
    }
}
void solve() {
    while(true) {
        cin >> n >> m;
        if(n == 0 && m == 0)
            break;
        for (int i = 0; i < m; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            in_degree[v]++;
        }
        bfs();
        if (ans.size() != n) {
            cout << "IMPOSSIBLE\n";
        }
        else {
            for (auto e: ans)
                cout << e << "\n";
        }
        memset(vis, 0, sizeof vis);
        memset(in_degree, 0, sizeof in_degree);
        for(int i = 1;i<=n;i++){
            adj[i].clear();
        }
        ans.clear();
    }
}

signed main() {
    fastIO();
    solve();
    return 0;
}